name: CI
on:
  # always execute docker build when something is pushed to main or a maintenance branch
  push:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'main'
      - '[0-9]+.[1-9][0-9]*.x'
env:
  GO_VERSION: "~1.18"
  CONTROLLER_TOOLS_VERSION: "v0.9.2"
  ENVTEST_K8S_VERSION: "1.24.2"
  SCHEDULER_COMPATIBLE_K8S_VERSION: "v0.24.3"

defaults:
  run:
    shell: bash

jobs:
  prepare_ci_run:
    name: Prepare CI Run
    runs-on: ubuntu-22.04
    outputs:
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}
      BUILD_TIME: ${{ steps.get_datetime.outputs.BUILD_TIME }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Extract branch name
        id: extract_branch
        uses: keptn/gh-action-extract-branch-name@main

      - name: Get current date and time
        id: get_datetime
        run: |
          DATETIME=$(date +'%Y%m%d%H%M')
          BUILD_TIME=$(date -u "+%F_%T")
          echo "DATETIME=$DATETIME" >> "$GITHUB_OUTPUT"
          echo "BUILD_TIME=$BUILD_TIME" >> "$GITHUB_OUTPUT"

  compile:
    name: Compile
    needs: prepare_ci_run
    runs-on: ubuntu-22.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATETIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix:
        config:
          - name: "keptn-lifecycle-operator"
            folder: "operator/"
          - name: "scheduler"
            folder: "scheduler/"
            # Nothing to compile in functions-runtime
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: '${{ matrix.config.folder }}go.sum'

      - name: Go fmt
        if: matrix.config.name != 'functions-runtime'
        working-directory: ./${{ matrix.config.folder }}
        run: go vet ./...

      - name: Go fmt
        if: matrix.config.name != 'functions-runtime'
        working-directory: ./${{ matrix.config.folder }}
        run: go fmt ./...

      - name: Compile ${{ matrix.config.name }}
        working-directory: ./${{ matrix.config.folder }}
        run: make build

  test:
    name: Unit Tests
    needs: prepare_ci_run
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config:
          - name: "keptn-lifecycle-operator"
            folder: "operator/"
          - name: "scheduler"
            folder: "scheduler/"
            # Nothing to test in functions-runtime
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: '${{ matrix.config.folder }}go.sum'

      - name: Test ${{ matrix.config.name }}
        working-directory: ./${{ matrix.config.folder }}
        run: |
          make test

  build_image:
    name: Build and push Docker Image
    needs: [ prepare_ci_run, compile, test ]
    runs-on: ubuntu-22.04
    permissions:
      packages: write # Needed for pushing images to the registry
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATETIME }}
      BUILD_TIME: ${{ needs.prepare_ci_run.outputs.BUILD_TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    strategy:
      matrix:
        config:
          - name: "keptn-lifecycle-operator"
            folder: "operator/"
          - name: "scheduler"
            folder: "scheduler/"
          - name: "functions-runtime"
            folder: "functions-runtime/"
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && ( github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository )
        uses: docker/login-action@v2
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
# TODO fix VERSION in scheduler. this needs to be set to the k8s version that the scheduler is compiled against
      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.config.folder }}
          platforms: linux/amd64,linux/arm64
          target: production
          tags: |
            ghcr.io/keptn-sandbox/${{ matrix.config.name }}:dev-${{ env.DATETIME }}
          build-args: |
            GIT_HASH=${{ env.GIT_SHA }}
            RELEASE_VERSION=dev-${{ env.DATETIME }}
            BUILD_TIME=dev-${{ env.BUILD_TIME }}
            CONTROLLER_TOOLS_VERSION=${{ env.CONTROLLER_TOOLS_VERSION }}
            SCHEDULER_COMPATIBLE_K8S_VERSION=${{ env.SCHEDULER_COMPATIBLE_K8S_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Install controller-gen
        if: matrix.config.name == 'keptn-lifecycle-operator' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && ( github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository )
        working-directory: ./${{ matrix.config.folder }}
        run: make controller-gen

      - name: Generate release.yaml
        if: matrix.config.name != 'functions-runtime' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && ( github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository )
        working-directory: ./${{ matrix.config.folder }}
        env:
          TAG: dev-${{ env.DATETIME }}
        run: make release-manifests

      - name: Upload release.yaml
        if: matrix.config.name != 'functions-runtime' && ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && ( github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository )
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.name }}-manifest
          path: ${{ matrix.config.folder }}/config/rendered/release.yaml
